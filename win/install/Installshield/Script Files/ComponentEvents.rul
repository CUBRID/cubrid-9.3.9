//////////////////////////////////////////////////////////////////////////////
//  EVENT:      Installing event is sent just before files for the component: 
//              CUBRID are transferred. 
///////////////////////////////////////////////////////////////////////////////
export prototype CUBRID_Installing();
function CUBRID_Installing()
    NUMBER    nResult;
    STRING    szProgram, PROGRAM;
    STRING    szKey, szKeyTray;
    NUMBER    nvType, nvSize;
    STRING    svNumValue;

begin
    if (CreateRegistrySet ("CUBRID") < 0 ) then
        MessageBox (@SCRIPT_STR_0044,SEVERE);
        abort;
    endif;

    Disable(LOGGING) ;
    szKey = "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";

    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    RegDBGetKeyValueEx (szKey, "Path" , nvType, svNumValue, nvSize);
    nResult = RegDBSetKeyValueEx(szKey, "Path", REGDB_STRING_EXPAND, TARGETDIR^"\\bin\\;" + svNumValue  , -1);
    RefreshEnvironment();

    Enable(LOGGING) ;
end;

//////////////////////////////////////////////////////////////////////////////
//  EVENT:      Installed event is sent just after files for the component: 
//              CUBRID are transferred. 
///////////////////////////////////////////////////////////////////////////////
export prototype CUBRID_Installed();
function CUBRID_Installed()
    STRING    PROGRAM, Service_Path;
    STRING  TARGET_PATH, TARGET_DIR;
    STRING  szDBPath, svResult, szCaption;
    STRING  SCH_FILE, OBJ_FILE, dbtxt;
    int     nResult;
begin
    RefreshEnvironment();

    Delay(3);
     
    dbtxt = TARGETDIR^"databases\\databases.txt";
    LongPathToQuote(dbtxt, TRUE);
    nResult  = Is (FILE_EXISTS, dbtxt);

    if (nResult = FALSE) then
        LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c echo on > " + dbtxt, WAIT) ;
    endif;

    // mkdir conf files
    makeconf(TARGETDIR^"conf\\cubrid_broker.conf");
    makeconf(TARGETDIR^"conf\\cubrid.conf");
    makeconf(TARGETDIR^"conf\\cm.conf");
    makeconf(TARGETDIR^"conf\\cmdb.pass");
    makeconf(TARGETDIR^"conf\\cm.pass");
    makeconf(TARGETDIR^"conf\\cubrid_locales.all.txt");
    makeconf(TARGETDIR^"conf\\cubrid_locales.txt");
    makeconf(TARGETDIR^"conf\\shard.conf");
    makeconf(TARGETDIR^"conf\\shard_connection.txt");
    makeconf(TARGETDIR^"conf\\shard_key.txt");
    
    // Register CUBRID Service    
    PROGRAM = TARGETDIR + "\\bin\\ctrlService.exe ";
    Service_Path = TARGETDIR + "\\bin";
    LongPathToQuote (PROGRAM, TRUE);
    LongPathToQuote (Service_Path, TRUE);
    
    if (LaunchAppAndWait (PROGRAM, "-i " + Service_Path, WAIT ) < 0) then  
        MessageBox(@SCRIPT_STR_0045 + " : " + PROGRAM, WARNING);
    endif;

    // Start CUBRIDService
    PROGRAM = TARGETDIR + "\\bin\\ctrlService.exe ";
    LongPathToQuote(PROGRAM, TRUE);
    LaunchAppAndWait(PROGRAM, "-start", WAIT);

    Delay(1);
              
    svResult = @SCRIPT_STR_0046;
    szCaption = @SCRIPT_STR_0047;
    nResult = SprintfBox(MB_YESNO,szCaption,"%s",svResult);

    if (nResult = IDYES) then
        szDBPath = TARGETDIR^"\\databases\\demodb";
        DeleteFile(szDBPath^"\\*");

        // make demodb database
        TARGET_DIR = TARGETDIR + "\\databases\\demodb";
        if (ChangeDirectory (TARGET_DIR) = 0) then
            TARGET_PATH = TARGETDIR;
            PROGRAM = TARGETDIR + "\\bin\\makedemo_is.bat";
            SCH_FILE = TARGETDIR + "\\bin\\demodb_schema";
            OBJ_FILE = TARGETDIR + "\\bin\\demodb_objects";
                        
            LongPathToQuote(PROGRAM, TRUE);
            LongPathToQuote(TARGET_PATH, TRUE);
            LaunchAppAndWait(PROGRAM, "demodb " + TARGET_PATH, WAIT) ;
            LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c del " + PROGRAM, WAIT) ;
            LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c del " + SCH_FILE, WAIT) ;
            LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c del " + OBJ_FILE, WAIT) ;
        endif;
    endif;  
    
    if (SYSINFO.nOSMajor >= 6) then
        nResult = LaunchAppAndWait("SCHTASKS.exe","/Create /TN \"CUBRID Service Tray\" /TR " + TARGETDIR + "\\bin\\CUBRID_Service_Tray.exe /SC ONLOGON /RL HIGHEST", LAAW_OPTION_WAIT);
        if (nResult < 0) then
            MessageBox("Fail to run SCHTASKS.exe. CUBRID Service Tray will not be started automatically", WARNING);
        elseif (nResult = 0 && LAAW_PARAMETERS.nLaunchResult != 0) then
            MessageBox("Cannot add task to Task Scheduler service. CUBRID Service Tray will not be started automatically. Please verify whether Task Scheduler service has been started.", WARNING);
        endif;
    else
        nResult = LaunchAppAndWait("SCHTASKS.exe", "/Create /TN \"CUBRID Service Tray\" /TR " + TARGETDIR + "\\bin\\CUBRID_Service_Tray.exe /SC ONLOGON /RU SYSTEM", LAAW_OPTION_WAIT);
        if (nResult < 0) then
            MessageBox("Fail to run SCHTASKS.exe. CUBRID Service Tray will not be started automatically", WARNING);
        elseif (nResult = 0 && LAAW_PARAMETERS.nLaunchResult != 0) then
            MessageBox("Cannot add task to Task Scheduler service. CUBRID Service Tray will not be started automatically. Please verify whether Task Scheduler service has been started.", WARNING);
        endif;
    endif;
end;

///////////////////////////////////////////////////////////////////////////////
//  EVENT:      Uninstalling event is sent just before files for the component:
//              CUBRID are removed during uninstallation. 
///////////////////////////////////////////////////////////////////////////////
 
export prototype CUBRID_UnInstalling();
function CUBRID_UnInstalling()
    STRING PROGRAM, TARGET_PATH;
    NUMBER nResult;
begin
    Disable(LOGGING);
    
    LaunchAppAndWait("SCHTASKS.exe ", "/Delete /TN \"CUBRID Service Tray\" /F", WAIT) ;

    PROGRAM = TARGETDIR + "\\bin\\ctrlService.exe ";
    LongPathToQuote(PROGRAM, TRUE);
    if (LaunchAppAndWait (PROGRAM, "-u", WAIT) < 0) then 
//        MessageBox("Sorry, Fail to unregiste to NT Service", WARNING);
    endif;          

    PROGRAM = TARGETDIR + "\\bin\\setupManage.exe ";
    TARGET_PATH = TARGETDIR;
    LongPathToQuote(TARGET_PATH, TRUE);
    LongPathToQuote(PROGRAM, TRUE);    
    nResult = LaunchAppAndWait (PROGRAM,  " -d " + TARGET_PATH, WAIT );
    if nResult < 0 then
//        MessageBox ("Sorry, Fail to remove the path information.", WARNING);
    endif;

    RefreshEnvironment();
    
    Enable(LOGGING) ;

end;
